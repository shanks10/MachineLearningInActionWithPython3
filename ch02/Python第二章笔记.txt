1.array.shape返回一个元组，元组中的每个元素表示相应的数组每一维的长度
若array是2维，则array.shape[0]返回行数，array.shape[1]返回列。
可这样简单理解：从array最里面的中括号开始，求得该维长度为m；向外找到第二个中括号，求得该维长度为n；再向外找到第三个中括号，求得该维长度为k; 则shape = (k,n,m)。

比如：m = [[[1,1],[1,2],[1,3],[1,4]],[[1,1],[1,2],[1,3],[1,4]],[[1,1],[1,2],[1,3],[1,4]]]
最里面的中括号里有2个元素，[1,1]，长度为2；
再往外的中括号有4个元素，[[1,1],[1,2],[1,3],[1,4]]，长度为4；
再往外的中括号有3个元素，[ [[1,1],[1,2],[1,3],[1,4]], [[1,1],[1,2],[1,3],[1,4]], [[1,1],[1,2],[1,3],[1,4]] ]，长度为3；
则 m.shape = (3, 4, 2)

例子：
c = array([[1,1],[1,2],[1,3],[1,4]])  
 c.shape = (4, 2)  
 c.shape[0] = 4  
 c.shape[1] = 2  


2.tile(A, reps)：Construct an array by repeating A the number of times given by reps.

例子：
只考虑一维的例子，tile(A, reps)可简单认为是reps元组数字从后向前开始广播重复扩充 A，至于多维的例子以及扩充后的维度自行help(tile)。

m = array([5,6,7])
tile(m,2) = array([5, 6, 7, 5, 6, 7])
说明：m重复2次
tile(m,3) = array([5, 6, 7, 5, 6, 7, 5, 6, 7])
说明：m重复3次
tile(m,(1,2)) = array([[5, 6, 7, 5, 6, 7]])
说明：m先重复2次，得到的结果再重复1次
tile(m,(2,1)) = array([[5, 6, 7],[5, 6, 7]])
说明：m先重复1次，得到的结果再重复2次
tile(m,(2,3)) = array([[5, 6, 7, 5, 6, 7, 5, 6, 7],[5, 6, 7, 5, 6, 7, 5, 6, 7]])
说明：m先重复3次，得到的结果再重复2次(由reps元组从后向前取数字扩充)
tile(m,(3,2)) = array([[5, 6, 7, 5, 6, 7],[5, 6, 7, 5, 6, 7],[5, 6, 7, 5, 6, 7]])
说明：m先重复2次，得到的结果再重复3次(由reps元组从后向前取数字扩充)
tile(m,(3,1,2)) = array([[[5, 6, 7, 5, 6, 7]],[[5, 6, 7, 5, 6, 7]],[[5, 6, 7, 5, 6, 7]]])
说明：m先重复2次，得到的结果再重复1次，再将得到的结果再重复3次(由reps元组从后向前取数字扩充)

3. ** 次方

例子：
a = 3， a ** 2 = 9, a ** 3 = 27;
a = array([3,4]), a ** 2 = array([ 9, 16], dtype=int32), a ** 3 = array([27, 64], dtype=int32);
a = array([[3,4],[2,5]]), a ** 2 = array([[ 9, 16],[ 4, 25]], dtype=int32), a ** 3 = array([[ 27,  64],[  8, 125]], dtype=int32);

4.array维度的理解：比如有个n维的arrayA,最外面的中括号是第0维，次外面的中括号是第1维，以此类推，最里面的中括号是第n维。

例子：
m = [[[1,1],[1,2],[1,3],[1,4]],[[1,1],[1,2],[1,3],[1,4]],[[1,1],[1,2],[1,3],[1,4]]]；
m是个3维的array,
最外面的中括号是第0维，[ [[1,1],[1,2],[1,3],[1,4]], [[1,1],[1,2],[1,3],[1,4]], [[1,1],[1,2],[1,3],[1,4]] ]，因此第0维有3个元素，长度为3；
次外面的中括号是第1维，[[1,1],[1,2],[1,3],[1,4]]，因此第1维有4个元素，长度为4；
最里面的中括号是第2维，[1,1]，因此第2维有2个元素，长度为2；
array.shape() 返回array各个维度的长度，由此可知：
m.shape = m.shape = (3, 4, 2)，表示m的第0维长度为3，第1维长度为4，第2维长度为2。

5.sum(axis=n) 第n维消失，其他维不变，对第n维里的元素求和

例子：
m = array([[[1,1],[1,2],[1,3],[1,4]],[[1,1],[1,2],[1,3],[1,4]],[[1,1],[1,2],[1,3],[1,4]]])；

m.sum(axis=0) = array([[ 3,  3],[ 3,  6],[ 3,  9],[ 3, 12]]),
解释：第0维为array([[[1,1],[1,2],[1,3],[1,4]],[[1,1],[1,2],[1,3],[1,4]],[[1,1],[1,2],[1,3],[1,4]]])
对第0维(最外面的中括号对应第0维)里的每个元素求和，第0维里有三个元素，分别是:
e1 = array([[1,1],[1,2],[1,3],[1,4]])，
e2 = array([[1,1],[1,2],[1,3],[1,4]])，
e3 = array([[1,1],[1,2],[1,3],[1,4]])
则 e1 + e2 + e3 = array([[ 3,  3],[ 3,  6],[ 3,  9],[ 3, 12]])，第0维消失。

m.sum(axis=1) = array([[ 4, 10],[ 4, 10],[ 4, 10]])
解释：第1维为array([[1,1],[1,2],[1,3],[1,4]]) 
对第1维(次外面的中括号对应第1维)里的每个元素求和，第1维里有四个元素，分别是:
e1 = array([1,1])，
e1 = array([1,2])，
e1 = array([1,3])，
e1 = array([1,4])，
则 e1 + e2 + e3 + e4 = array([ 4, 10])
对另外2个第1维里的每个元素求和，第1维消失，最后得到array([[ 4, 10],[ 4, 10],[ 4, 10]])

m.sum(axis=2) = array([[2, 3, 4, 5],[2, 3, 4, 5],[2, 3, 4, 5]])
解释：第2维为array([1,1]) 
对第2维(最里面的中括号对应第2维)里的每个元素求和，第2维里有四个元素，分别是:
e1 = 1
e2 = 1
则 e1 + e2 = 2
对另外11个第2维里的每个元素求和，第2维消失，最后得到array([[2, 3, 4, 5],[2, 3, 4, 5],[2, 3, 4, 5]])

6.array.argsort 返回array元素从小到大的索引值

例子：
array([2,1,8,4]).argsort() = array([1, 0, 3, 2], dtype=int64);

7.字典的get()方法
D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
字典 get()函数返回指定键的值，如果键不存在，返回第二个参数，第二个参数是默认是None。
dict.get(key, default=None)

例子：
dictA = {'test': 'hello', 'age': 27}
dictA.get("test") = 'hello',
dictA.get("age") = 27,
dictA.get("age",20) = 27,
dictA.get("noKey",20) = 20,
dictA.get("noKey") = None

8.字典的items()方法
字典 items() 方法以列表返回可遍历的(键, 值) 元组数组

例子：
dictA = {'test': 'hello', 'age': 27}
dictA.items() = dict_items([('test', 'hello'), ('age', 27)])，
for i,j in dictA.items():
    print(i,":",j)
输出：
test : hello
age : 27

9.operator.itemgetter()
operator.itemgetter()获取的不是值，而是定义了一个函数，通过该函数作用到对象上才能获取值
After f = itemgetter(2), the call f(r) returns r[2].
After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])

例子：

listA = ["test","age","name"]

f = operator.itemgetter(1)
f(listA) = 'age',

f = operator.itemgetter(0,1)
f(listA) = ('test', 'age')

10.sorted(iterable, key=None, reverse=False)
sorted() 函数对所有可迭代的对象进行排序操作

sort 与 sorted 区别：
sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。
list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。

key函数接受一个参数，
排序过程：key函数作用于iterable的每一个元素上，得到结果keyResult，然后sorted()函数对keyResult进行排序，得到sortedKeyResult,最后按照sortedKeyResult和iterable的对应关系返回iterable排序后的结果。

例子：

sorted([36, 5, -12, 9, -21]) = [-21, -12, 5, 9, 36]；

sorted([36, 5, -12, 9, -21], key=abs) = [5, 9, -12, -21, 36]
排序过程：
（1）key函数作用于iterable的每一个元素上，得到结果keyResult = [36, 5,  12, 9,  21]
（2）然后sorted()函数对keyResult进行排序，得到sortedKeyResult = [5, 9,  12,  21, 36]
（3）最后按照sortedKeyResult和iterable的对应关系返回iterable排序后的结果
sortedKeyResult   =  [5, 9,  12,  21, 36]
iterable的对应关系 =  [5, 9, -12, -21, 36]
最后结果为 [5, 9, -12, -21, 36]

11.读取文件的三个方法：read()、readline()、readlines()，三个方法均可接受一个变量用以限制每次读取的数据量，通常不使用该变量。

read():
1.读取整个文件，将文件内容放到一个字符串变量中
2.如果文件大于可用内存，不可能使用这种处理

readline():
1.readline()每次读取一行，比readlines()慢得多
2.readline()返回的是一个字符串对象，保存当前行的内容

readlines():
1.一次性读取整个文件。
2.自动将文件内容分析成一个行的列表。

逐行读建议用：
with open("file") as fh:
    for line in fh:
        print(line.strip())


12.str.strip()
S.strip([chars]) -> str
    
    Return a copy of the string S with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.


13.str.split
S.split(sep=None, maxsplit=-1) -> list of strings
    
    Return a list of the words in S, using sep as the
    delimiter string.  If maxsplit is given, at most maxsplit
    splits are done. If sep is not specified or is None, any
    whitespace string is a separator and empty strings are
    removed from the result.

14.os.listdir
listdir(path=None)
    Return a list containing the names of the files in the directory.

    path can be specified as either str or bytes.  If path is bytes,
      the filenames returned will also be bytes; in all other circumstances
      the filenames returned will be str

    The list is in arbitrary order.  It does not include the special
    entries '.' and '..' even if they are present in the directory.